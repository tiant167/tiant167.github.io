{"version":3,"file":"static/webpack/static/development/pages/p/[filename].js.681e495a35155587dc79.hot-update.js","sources":["webpack:///./pages/p/[filename].tsx"],"sourcesContent":["import Layout from '../../components/MyLayout'\nimport Markdown from 'react-markdown';\nimport * as fs from 'fs'\nimport { NextPage, GetStaticPaths, GetStaticProps } from 'next';\nimport dataSet from '../../markdown/data.json'\n\nconst fsPromise = fs.promises\n\nconst Content = (props: { content: string }) => {\n  return (\n    <div className={css.markdown}>\n      <Markdown source={props.content}/>\n    </div>\n  )\n}\n\nconst Page: NextPage<{content: string}> = ({ content }) => {\n  return (\n    <Layout>\n      <Content content={content}/>\n    </Layout>\n  )\n}\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  // Get the paths we want to pre-render based on posts\n  const paths = (dataSet as FileDataSet[]).map(data => ({\n    params: { filename: data.filename },\n  }))\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n\nexport const getStaticProps: GetStaticProps = async ({params}) => {\n  console.log('params', params)\n  const {filename} = params!\n  const content = await fsPromise.readFile(`./markdown/${filename}.md`)\n  return {props: {content: content.toString()}}\n}\n\n\nexport default Page\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;AAoBA;;;;A","sourceRoot":""}